// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/JonathanGzzBen/ingenialists/api/v1/models"
	mock "github.com/stretchr/testify/mock"
)

// ArticlesRepository is an autogenerated mock type for the ArticlesRepository type
type ArticlesRepository struct {
	mock.Mock
}

// CreateArticle provides a mock function with given fields: _a0
func (_m *ArticlesRepository) CreateArticle(_a0 *models.Article) (*models.Article, error) {
	ret := _m.Called(_a0)

	var r0 *models.Article
	if rf, ok := ret.Get(0).(func(*models.Article) *models.Article); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Article) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArticle provides a mock function with given fields: _a0
func (_m *ArticlesRepository) DeleteArticle(_a0 uint) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllArticles provides a mock function with given fields:
func (_m *ArticlesRepository) GetAllArticles() ([]models.Article, error) {
	ret := _m.Called()

	var r0 []models.Article
	if rf, ok := ret.Get(0).(func() []models.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticle provides a mock function with given fields: _a0
func (_m *ArticlesRepository) GetArticle(_a0 uint) (*models.Article, error) {
	ret := _m.Called(_a0)

	var r0 *models.Article
	if rf, ok := ret.Get(0).(func(uint) *models.Article); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticle provides a mock function with given fields: _a0
func (_m *ArticlesRepository) UpdateArticle(_a0 *models.Article) (*models.Article, error) {
	ret := _m.Called(_a0)

	var r0 *models.Article
	if rf, ok := ret.Get(0).(func(*models.Article) *models.Article); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Article) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
