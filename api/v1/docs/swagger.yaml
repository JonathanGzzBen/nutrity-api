basePath: /v1
definitions:
  models.APIError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  server.RegisterUserDTO:
    properties:
      Email:
        type: string
      GoogleToken:
        type: string
      Username:
        type: string
    type: object
  server.UpdateUserDTO:
    properties:
      calories:
        type: integer
      carbs:
        type: integer
      day:
        type: integer
      email:
        type: string
      fats:
        type: integer
      firstname:
        type: string
      lastname:
        type: string
      proteins:
        type: integer
      recipesAdded:
        items:
          type: string
        type: array
      userProfileEdited:
        type: boolean
      username:
        type: string
    type: object
  server.UserDTO:
    properties:
      calories:
        type: integer
      carbs:
        type: integer
      day:
        type: integer
      email:
        type: string
      fats:
        type: integer
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      proteins:
        type: integer
      recipesAdded:
        items:
          type: string
        type: array
      userProfileEdited:
        type: boolean
      username:
        type: string
    type: object
  server.tokenResponse:
    properties:
      AccessToken:
        type: string
      TokenType:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: jonathangzzben@gmail.com
    name: JonathanGzzBen
    url: http://www.github.com/JonathanGzzBen
  description: This is Ingenialist's API
  license:
    name: MIT License
    url: https://mit-license.org/
  title: Ingenialists API V1
  version: v1.0.0
paths:
  /auth:
    get:
      operationId: GetCurrentUser
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.UserDTO'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - AccessToken: []
      tags:
      - auth
    post:
      operationId: RegisterUser
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/server.RegisterUserDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.tokenResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIError'
      tags:
      - auth
  /users:
    get:
      description: Get all registered users.
      operationId: GetAllUsers
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/server.UserDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      description: Get user with matching ID.
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.UserDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get user
      tags:
      - users
    put:
      description: Update matching user with provided data.
      operationId: UpdateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/server.UpdateUserDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - AccessToken: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  AccessToken:
    in: header
    name: AccessToken
    type: apiKey
swagger: "2.0"
